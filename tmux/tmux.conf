# tmux.conf by @windvalley
# https://raw.githubusercontent.com/vimhack/dotfiles/master/tmux/tmux.conf


# vim: set foldmarker={{,}} foldlevel=0 foldmethod=marker:
#
# NOTE:
#   1. 查看折叠内容的方法:
#      za: normal 模式下按 za, 表示当光标在关闭折叠上时打开之, 在打开折叠上时关闭之;
#          在打开的折叠内部任意处按 za, 也会关闭折叠.
#      zA: 是 za 的递归操作, 是针对嵌套折叠的场景.
#
#   2. 下面注释中的所有快捷键, 都是必须先按 ctrl a 松手后再需要按的.


# --- 安装步骤  Installation {{

# 以 MacOS 举例:
#   1) brew install tmux
#   2) curl -sfLo ~/.tmux.conf https://raw.githubusercontent.com/vimhack/dotfiles/master/tmux/tmux.conf
#   3) git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#   4) 进入 tmux 终端环境后, 先按 ctrl a, 松手后再按 I 来安装所有配置的插件.

# }}


# --- 基础配置  Basic {{

# 将系统环境变量 $PATH 的值添加到这里,
# 解决 '~/.tmux/plugins/tpm/tpm returned 1' 等找不到相关命令的问题.
# doc: https://github.com/tmux-plugins/tpm/blob/master/docs/tpm_not_working.md
set-environment -g PATH "$HOME/.dotfiles/bin:\
/usr/local/opt/node@14/bin:\
/usr/local/opt/python3/bin:\
$HOME/go/bin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin"

# 添加新的 prefix 键: ctrl a, 默认的 ctrl b 不取消, 不推荐.
#set -g prefix2 C-a
#bind C-a send-prefix -2

# 重置 prefix 键为: ctrl a, 取消默认的 ctrl b 键.
# 由于 ctrl b 是命令行操作非常频繁使用的光标左移快捷键,
# 为了排除干扰, 所以取消掉默认的 prefix 映射;
# 虽然 ctrl a 也是命令行操作较常用的快捷键, 用于光标跳转到命令行起始位置,
# 但按键不是很频繁, 我们只需连续按2次 ctrl a 即可实现跳转, 影响不大.
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# 新建窗口时使用的默认终端.
# NOTE: 如果设置成 screen-256color,
# 会造成通过 ssh 连接到远程 centos5.x 系统上时, 无法使用 clear 命令.
set -g default-terminal xterm-256color

# 如下 2 条配置用来解决 vim 配置 set termguicolors 时, 在 tmux 下使用 vim 没有预期效果的问题.
set -g terminal-overrides ',xterm-256color:Tc'
set -as terminal-overrides ',xterm*:sitm=\E[3m'

# 按完 prefix 键, 再按 esc 键, 多少毫秒后取消 prefix,
# 如果有计划把 esc 键也作为功能键的一部分时, 把这个时间设置的长一些才有意义,
# 否则直接设置为 0 即可.
set -sg escape-time 0

# 按完 prefix 键和功能键后, 可只按功能键来实施相同的功能,
# 按键间隔时间超过这里设置的时间后就需要重新输入 prefix 键了.
# 比较适用于 resize 窗格的快捷键, 省去了频繁按 prefix 键的麻烦.
set -sg repeat-time 500

# 一个窗口最多保留多少条历史记录.
set -g history-limit 50000

# 支持使用鼠标切换窗口, 调整窗格大小等.
set -g mouse on

# prefix :  进入 command 模式后, 使用 vi 的键映射, 默认 emacs.
set -g status-keys vi

# prefix [  进入 copy 模式后, 使用 vi 的键映射, 默认 emacs.
setw -g mode-keys vi

# }}


# --- 窗格配置  Panes Customization {{

# 窗格编号从 1 开始, 默认是从 0 开始.
setw -g pane-base-index 1

# 窗格边框颜色.
set -g pane-border-style fg=colour244

# 当前活动窗格边框颜色.
set -g pane-active-border-style fg=blue

# 窗格序号的颜色设置.
set -g display-panes-colour colour33

# 活动窗格序号的颜色设置.
set -g display-panes-active-colour colour166

# 窗格序号的展示时间, 比如 q 命令展示的窗格编号的显示时长, 单位毫秒,
# 按 esc 可随时退出窗格编号的展示.
# NOTE:
#   q 命令显示所有窗格的数字编号后, 再按想跳转到的窗格的数字编号即可完成光标跳转,
#   不过需要注意, 如果窗格数量大于等于 10 后, 10 以及 10 以上的窗格就不能通过这种
#   方式做光标跳转了.
set -g display-panes-time 3000

# t 时钟的颜色设置.
setw -g clock-mode-colour green

# 设置时钟的显示格式, 12 小时或 24 小时.
# Default: 24
set -g clock-mode-style 24

# 显示窗格的名称并确定显示的位置, 可选值: top, bottom
set -g pane-border-status top

# 当一个窗口只有一个窗格的时候, 自动隐藏窗格名称.
# Auto hide pane-border-status line when only one pane is displayed.
set-hook -g 'after-new-window' 'run-shell -b "
    if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'after-new-session' 'run-shell -b "
    if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'after-kill-pane' 'run-shell -b "
    if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'pane-exited' 'run-shell -b "
    if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'after-split-window' 'run-shell -b "
    if [ \#{window_panes} -gt 1 ]; then tmux set pane-border-status top; fi"'

# }}


# --- 状态栏配置  Statusline Customization {{

# 新建 session 时, 是否默认开启状态栏.
# 默认值: on, 可选值: off, 2, 3, 4, 5 or more
set -g status on

# 状态栏的位置.
# 默认值: bottom, 可选值: top
set -g status-position top

# 状态栏颜色设置.
set -g status-style bg=terminal,fg=terminal

# 重绘状态栏的间隔秒数, 默认 15 秒.
set -g status-interval 1

# 状态栏上出现的消息的颜色设置.
set -g message-style bg=colour235,fg=colour166

# 设置状态栏消息展示的时间, 单位毫秒.
set -g display-time 600

# *** status-left {{

# 状态栏左边信息的显示长度.
set -g status-left-length 40

# status-left 状态栏左边显示的信息定制.
# #S  Name of session
set -g status-left "#[fg=#CE0000,bold]   #S "

# }}

# *** window list {{

# 窗口名称列表栏的位置调整, 默认值: left, 可选值: centre, right
set -g status-justify left

# 是否允许更改窗口名.
set -wg allow-rename on

# 是否允许窗口自动重命名.
set -wg automatic-rename off

# 窗口编号从 1 开始, 默认是从 0 开始.
set -g base-index 1

# 如果有窗口关闭, 对现有窗口进行重新编号.
set -g renumber-windows on

# 监控窗口活动, 活动的窗口在状态栏高亮显示.
set -g monitor-activity on

# 监控窗口是否有铃声, 如果有铃声则在状态栏提示.
set -g monitor-bell on

# 每隔几秒监控一次窗口是否是静默状态, 默认是 0 表示不监控静默状态.
set -g monitor-silence 0

# 是否在状态栏弹出某某窗口正在活动状态的提示消息.
set -g visual-activity off

# 是否在状态栏弹出某某窗口发出铃声的提示消息.
set -g visual-bell off

# 是否在状态栏弹出某某窗口是不活动状态的提示消息.
set -g visual-silence off

# 窗口名称的颜色设置.
setw -g window-status-style fg=colour244,bg=default,dim

# 当前活动窗口名称的颜色设置.
setw -g window-status-current-style fg=colour166,bg=default,bright

# 窗口名称列表使用的分隔符, 默认为一个空格.
set -g window-status-separator " "

# 窗口名称格式.
# #I  Index of window.
# #W  Name of window.
set -g window-status-format "#I:\
#W\
#{?window_activity_flag,  ,}\
#{?window_bell_flag,  ,}\
#{?window_zoomed_flag,  ,}\
#{?pane_marked,  ,}\
#{?window_last_flag,  ,}"

# 当前窗口名称格式.
set -g window-status-current-format "#I:\
#W ✳\
#{?window_bell_flag,  ,}\
#{?window_zoomed_flag,  ,}\
#{?pane_marked,  ,}"

# }}

# *** status-right {{

# 状态栏右边信息的显示长度.
set -g status-right-length 180

set -g status-right "#{prefix_highlight} \
#[fg=orange,bold]#{iptmthd} \
#[fg=#ff5f5f,bold] #{current_colorscheme} #[fg=#ff5f87]#{current_opacity} \
#[fg=#ff875f]ﯔ #{current_font} #{current_font_style} #[fg=#ff8787]#{current_font_size} \
#{online_status} \
#{cpu_fg_color}  #{cpu_percentage}  #{ram_percentage} \
#{cpu_temp_fg_color} #{cpu_temp}  #{fan_speed} \
#[fg=#ff5f87]#{volume_icon} #{volume_value} \
#{battery_color_charge_fg}#{battery_icon_status}#{battery_percentage} \
#[fg=#ff5f87]#{weather} \
#{moon_phase_icon} \
#[fg=#009393]⌚️%a %m-%d %H:%M:%S"

# }}

# }}


# --- 快捷键绑定  Key Bindings {{

# r  source 加载配置文件 ~/.tmux.conf, 使立即生效.
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# e  新创建一个 tmux 窗口来打开 ~/.tmux.conf, 保存后会自动对配置文件进行 source.
bind e new-window -n "~/.tmux.conf" "\${EDITOR:-vim} ~/.tmux.conf &&
    tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\""

# v  随机更换 Vim/Neovim 和 Alacritty 的 colorscheme.
bind v run 'random-colorscheme'

# F(shift f)  随机更换 Alacritty 的字体.
bind F run 'random-font'

# O(shift o)  在透明和不透明之间切换 Alacritty 的背景.
bind O run 'toggle-alacritty-transparent'

# ctrl k  增加 Alacritty 的透明度.
bind C-k run 'decrease-opacity'

# ctrl j  降低 Alacritty 的透明度.
bind C-j run 'increase-opacity'

# ctrl t  在当前窗格下方创建一个当前窗格的 16% 大小的新窗格.
# NOTE: 主要用于在使用 vim 编写代码时, 在当前窗格中临时建一个新窗格来执行命令行.
bind C-t run 'tmux split-window -v -p 16'

# b  显示或隐藏当前 session 的状态栏.
bind b set status

# ctrl b  显示或隐藏当前窗格的所有窗格的名称.
bind C-b set pane-border-status

# ctrl l  清空窗格屏幕的同时, 窗格的历史记录也被清除.
# NOTE: 注意和不加 prefix 的 ctrl l 的区别, 不加 prefix 的 ctrl l 只清空当前窗格的屏幕,
#       窗格的历史内容记录还是保留的, 可以通过进入 copy 模式后进行浏览.
bind C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# copy 模式下, 使用 v 进行文本选择, 使用 V 可进行按行选择.
bind -T copy-mode-vi v send-keys -X begin-selection

# copy 模式下, 使用 ctrl v 进行矩形选择, 按完 ctrl v 后, 需要再按 v 进行选择.
bind -T copy-mode-vi C-v send -X rectangle-toggle

# copy 模式下, 使用 y 将选择的文本拷贝到系统剪贴板;
# 如果安装了 tmux-plugins/tmux-yank 插件, 这条可以不配置.
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# ctrl y  打开/关闭 sync 模式, 进入 sync 模式后, 如果一个窗口有多个窗格,
#         在其中一个窗格执行命令, 其他窗格同时会执行该命令, 被 t 时间覆盖的窗格除外.
# NOTE: 不要使用 bind -n C-y 这种方式, 加 -n 表示不需要 prefix 前缀, 会导致 vim 的 ctrl y 快捷键无法使用.
bind C-y setw synchronize-panes

# ctrl c  创建新的 session.
bind C-c new-session

# meta(alt/option) f  输入关键字, 搜索 session.
bind M-f command-prompt -p find-session 'switch-client -t %%'

# k/j/h/l  光标向上/下/左/右边的窗格跳转.
bind -r k select-pane -U
bind -r j select-pane -D
bind -r h select-pane -L
bind -r l select-pane -R

# >/<  和下一个/上一个窗格交换位置.
bind > swap-pane -D
bind < swap-pane -U

# H/J/K/L  向左/下/上/右 resize 窗格.
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# }}


# --- 插件管理与配置  Plugins {{

# *** 安装插件管理工具:
#   git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#
# *** 基本使用方法:
#             I  安装新添加的插件.
#             U  更新插件.
#             u  卸载不在配置文件中的插件.

# *** TMUX plugin manager Begin
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @tpm-clean 'u'  # 重新绑定卸载插件的快捷键.
# ==============================

# 按 prefix 或 prefix + [ 或 prefix + ctrl y 等按键的时候, 在状态栏高亮显示.
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @prefix_highlight_fg 'black'
set -g @prefix_highlight_bg 'blue'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr 'fg=black,bg=green'
# ctrl a  按 prefix 时, 由显示 ^B 改为显示 Wait, 表示等待输入命令.
set -g @prefix_highlight_prefix_prompt 'Wait'
# [  进入 copy 模式时, 显示 Copy.
set -g @prefix_highlight_copy_prompt 'Copy'
# ctrl y  进入窗格同步模式时, 显示 Sync.
set -g @prefix_highlight_sync_prompt 'Sync'

# ctrl s  保存当前 session.
# ctrl r  由于服务器重启或 tmux kill-server 等原因导致丢失 session 后,
#         可以使用此命令恢复 session.
#
# NOTE: 不想恢复最近一次的保存, 想恢复到历史的某个保存的方法:
#       1) cd ~/.tmux/resurrect/
#       2) ln -sf <file_name> last
#       3) prefix + Ctrl r
set -g @plugin 'tmux-plugins/tmux-resurrect'
# 有了这个插件后, 我们就可以不用手动保存和恢复丢失的 session 了, 全部由此插件代劳.
set -g @plugin 'tmux-plugins/tmux-continuum'
# 每几分钟自动保存一次 session, 设置为 0 表示禁止自动保存功能, 默认值: 15
# NOTE: 可在状态栏上显示 session 保存的间隔时间: ⏳#[fg=cyan,bold]#{continuum_status}
set -g @continuum-save-interval '5'
# 丢失 session 后, 再次执行 tmux 时是否进行自动恢复 session.
set -g @continuum-restore 'on'
# 保存并恢复 vim/nvim 打开的状态.
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
# 如果使用的是 macvim(macOS), 需要使用下面这条配置来恢复 vim 打开状态.
set -g @resurrect-processes '~Vim -> vim'
# 保存并恢复窗格的内容.
set -g @resurrect-capture-pane-contents 'on'

# 使得可以搜索和复制命令行屏幕上的文本, 脱离繁琐的鼠标操作.
# ctrl f  进入 copy 模式, 光标跳转到命令行上方的文件名称并高亮显示选中文件名.
# ctrl g  进入 copy 模式, 用于 git status -sb 命令后, 选中列出的一个文件名称并高亮显示.
# ctrl u  进入 copy 模式, 光标跳转到命令行上方的 url 链接并高亮显示.
# ctrl d  进入 copy 模式, 光标跳转到命令行上方的数字并高亮显示.
#      /  进入字符串或正则搜索模式, 搜索命令行上方的文本并高亮显示.
#    n/N  向上/向下搜索文本.
#  enter  复制选中的文本.
#
# NOTE: 为了使 / 搜索命令好用, 系统上需要安装 grep 和 gawk: brew install grep gawk
set -g @plugin 'tmux-plugins/tmux-copycat'
# ctrl h  进入 copy 模式, 选中命令行上方的 hash 地址, 比如在执行完 git log 命令后使用.
set -g @copycat_hash_search 'C-h'
# ctrl i  进入 copy 模式, 选中命令行上方的 IP 地址, 并高亮显示.
set -g @copycat_ip_search 'C-i'
# D  高亮选中每行开头的数字字符串, 一般用于 pgrep -lf processname 命令后, 用来快速选择 PID.
set -g @copycat_search_D '^[[:digit:]]+'
# S  高亮选中 "" 包裹的字符串, 包括 "" 本身.
set -g @copycat_search_S '".*?"'

# 命令行文本复制插件.
# y  normal 模式下, 将命令行文本复制到系统剪贴板;
#    copy 模式下, 将通过 n/N 选择的高亮文本拷贝到系统剪贴板.
# Y  normal 模式下, 将窗格的当前工作目录文本拷贝到系统剪贴板;
#    copy 模式下, 将通过 n/N 选择的高亮文本直接复制并粘贴到命令行.
set -g @plugin 'tmux-plugins/tmux-yank'

# copy 模式下, 直接打开选中的文件或url, 或使用搜索引擎搜索选中的文本.
# o  直接使用相应的默认应用打开选中的文件或url.
# S  使用 google 搜索选中的字符串, 注意可使用 l 扩展选中的字符串.
# B  使用 bing 搜索选中的字符串.
set -g @plugin 'tmux-plugins/tmux-open'
set -g @open-B 'https://www.bing.com/search?q='
set -g @open-S 'https://www.google.com/search?q='

# #{iptmthd} 状态栏显示当前的输入法.
# NOTE: 仅支持 MacOS,
# 可修改 ~/.tmux/plugins/tmux-inputmethod/scripts/check_inputmethod.sh 改变显示样式.
set -g @plugin 'ki-chi/tmux-inputmethod'

# 在状态栏显示电量百分比.
set -g @plugin 'vimhack/tmux-battery'
# 每隔几秒钟更新一次电池状态. 默认: 3
set -g @batt_update_interval 10
# 正在为电池充电.
set -g @batt_icon_status_charging ' '
# 电池已充满电, 且电源插头没有拔掉.
set -g @batt_icon_status_charged ' '
# 已拔掉电源插头.
set -g @batt_icon_status_discharging ' '
# 电源插头已连接, 但还未开始充电.
set -g @batt_icon_status_attached ' '
# 未知的状态.
set -g @batt_icon_status_unknown ' '
# >= 95%
set -g @batt_color_charge_primary_tier8 '#008700'
# >= 80%
set -g @batt_color_charge_primary_tier7 '#00af5f'
# >= 65%
set -g @batt_color_charge_primary_tier6 '#00d75f'
# >= 50%
set -g @batt_color_charge_primary_tier5 '#87ff5f'
# >= 35%
set -g @batt_color_charge_primary_tier4 '#ffc000'
# >= 20%
set -g @batt_color_charge_primary_tier3 '#ff8000'
# > 5%
set -g @batt_color_charge_primary_tier2 '#ff4000'
# <= 5%
set -g @batt_color_charge_primary_tier1 '#ff0000'

# 在状态栏显示 CPU 和内存利用率, CPU 温度, 风扇转速等信息.
# #{cpu_percentage} #{ram_percentage} #{cpu_temp} #{fan_speed}
set -g @plugin 'vimhack/tmux-cpu'
# CPU 利用率配置.
set -g @cpu_low_fg_color "#[fg=#8787af]"
set -g @cpu_medium_fg_color "#[fg=#ff8000]"
set -g @cpu_high_fg_color "#[fg=#ff0000]"
set -g @cpu_medium_thresh "30"
set -g @cpu_high_thresh "70"
# CPU 温度配置.
set -g @cpu_temp_low_fg_color "#[fg=#8787af]"
set -g @cpu_temp_medium_fg_color "#[fg=#ff8000]"
set -g @cpu_temp_high_fg_color "#[fg=#ff0000]"
set -g @cpu_temp_medium_thresh "75"
set -g @cpu_temp_high_thresh "85"

# 在状态栏显示网络是否在线, 默认是通过 curl www.google.com 来检测网络连通性的.
set -g @plugin 'vimhack/tmux-onlinestatus#main'
set -g @check_interval_seconds 30
set -g @online_icon " "
set -g @offline_icon " "
set -g @online_fgcolor "#00afaf"
set -g @offline_fgcolor "#767676"
set -g @curl_timeout 6
set -g @url_to_curl "https://www.google.com"
set -g @terminal_proxy "http://10.16.13.18:8080"

# #{weather} 在状态栏显示当前的天气信息.
set -g @plugin 'vimhack/tmux-weather'
# 天气信息更新间隔, 单位分钟, 默认值: 15
set-option -g @tmux-weather-interval 10
# 显示哪个城市的天气信息, 如果值为空则会根据 IP 地址判断城市.
# NOTE: 如果使用了代理, 则会显示代理地址所在城市的天气信息.
set-option -g @tmux-weather-location "Beijing"
# 设置天气信息显示格式.
# doc: https://github.com/chubin/wttr.in#one-line-output
set-option -g @tmux-weather-format "+%c+%t+%w"

# #{moon_phase_icon}
# #{moon_phase_emoji}
# #{moon_phase_text}
set -g @plugin 'vimhack/tmux-moon-phase#main'
set -g @moon_phase_icon_color '#f1fa8c'

# #{current_colorscheme}  状态栏显示 Alacritty/Vim/Neovim 当前的 colorscheme.
# #{current_font}  Alacritty 当前的 font.
# #{current_font_size}  Alacritty 当前的 font size.
# #{current_font_style}  Alacritty 当前的 font style.
# #{current_opacity}  Alacritty 当前的 opacity.
set -g @plugin 'vimhack/tmux-show-colorscheme#main'

# #{volume_icon}  状态栏显示当前音量图标.
# #{volume_value}  状态栏显示当前音量值: 1-100
set -g @plugin 'vimhack/tmux-audio-volume#main'
set -g @speaker_muted_volume_icon ""
set -g @speaker_low_volume_icon ""
set -g @speaker_medium_volume_icon 'ﱛ'
set -g @speaker_high_volume_icon " "
set -g @headphone_icon " "

# *** TMUX plugin manager End
#
# 自动安装 tpm, 并自动安装其所管理的 tmux 插件.
if "test ! -d ~/.tmux/plugins/tpm" \
    "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && \
    tmux source ~/.tmux.conf && \
    ~/.tmux/plugins/tpm/bin/install_plugins && \
    tmux source ~/.tmux.conf'"

run '~/.tmux/plugins/tpm/tpm'
# ==============================

# }}


# --- 加载本地其他配置文件 Load Other config {{

# 如果需要重写上面的指令或不需要 git 管理的指令写在这个文件里.
source-file ~/.tmux.local.conf

# }}


# --- 使用技巧  Tips {{

#        ctrl a  prefix 按键, 以下所有按键如果没有特殊说明, 都必须先按 prefix,
#                注意按完 prefix, 需要先松开按键, 再按其他的具体命令按键.
#          meta  指的是 macOS 的 option 键或 windows/linuxs 的 alt 键.
#             e  编辑 ~/.tmux.conf 配置文件.
#             K  查看 ~/.tmux.conf 文件中光标所在的对象的帮助文档.
#             r  source ~/.tmux.conf, 使之立即生效.
#             ?  查看 tmux 键绑定的帮助信息.
#             d  退出 tmux 客户端.
#             =  打开拷贝历史, 选择一条, 然后回车, 即可将选择的内容写入当前打开的文件.
#                NOTE: 此拷贝历史记录是 copy 模式下进行复制的内容.
#             b  显示/隐藏当前 session 的状态栏.
#        ctrl b  显示/隐藏当前窗口的所有窗格的名称.
#             v  执行 random-colorscheme, 用来随机更换 Vim 和 Alacritty 的 colorscheme.
#             F  执行 random-font, 用来随机更换 Alacritty 的 font.
#             O  执行 toggle-alacritty-transparent, 用来在透明和不透明之间切换 Alacritty 的背景.
#        ctrl k  执行 decrease-opacity, 用来增加 Alacritty 的透明度.
#        ctrl j  执行 increase-opacity, 用来降低 Alacritty 的透明度.
#        ctrl t  在当前窗格下方创建一个当前窗格的 16% 大小的新窗格.
#
#   **** session 管理 ****
#             s  列出所有 session.
#        meta f  输入关键字, 搜索 session.
#        ctrl c  创建新的 session.
#             $  重命名当前 session.
#
#   **** 窗口管理 ****
#             c  新建一个窗口.
#             ,  重命名当前窗口.
#             .  改变当前 session 中的当前窗口的顺序位置.
#      esc && q  中止重命名窗口, 先按 esc, 再按 q 即可.
#           n/p  切换到下一个/上一个窗口.
#        number  切换到某个编号的窗口.
#             &  关闭当前窗口.
#             w  列出所有 session 的所有窗口.
#             f  输入关键字搜索窗口.
#
#   **** 窗口状态的标记符号释义 ****
#             *  Denotes the current window.
#                表示当前工作窗口.
#             -  Marks the last window (previously selected).
#                表示上一次所在的窗口.
#             #  Window is monitored and activity has been detected.
#                检测到窗口有信息.
#             !  A bell has occurred in the window.
#                检测到窗口有铃声响起.
#             ~  The window has been silent for the monitor-silence interval.
#                窗口在监视器静默间隔内静默.
#             M  The window contains the marked pane.
#                窗口中存在被标记的窗格.
#             Z  The window's active pane is zoomed.
#                窗口中有正在处于被缩放状态的窗格.
#
#   **** 窗格管理 ****
#             %  划分左右两个窗格.
#             "  划分上下两个窗格.
#             x  关闭当前窗格.
#          exit  在命令行执行 exit 也可以退出当前窗格, 如果当前窗格是窗口的最后一个窗格,
#                则窗口也同时关闭. NOTE: 不需要加 prefix.
#             z  全屏显示当前窗格, 或关闭全屏显示.
#             q  显示当前窗口的所有窗格编号.
#                NOTE: 显示所有窗格的数字编号后, 再按想跳转到的窗格的数字编号即可完成光标跳转,
#                不过需要注意, 如果窗格数量大于等于 10, 数字的右下角会多显示出一个字母,
#                需要按这个字母键来做跳转.
#             t  在当前窗格显示时钟, 我们可以留一个小窗格安放时钟, 醒目的提醒我们时间.
#         space  切换窗格布局.
#          kjhl  将光标跳转到上/下/左/右窗格.
#             ;  将光标跳转到上一次光标所在的窗格.
#          KJHL  向上/下/左/右调整窗格大小.
#           >/<  和下一个/上一个窗格交换位置.
#        ctrl l  清空窗格屏幕的同时, 窗格的历史记录也被清除.
#                NOTE: 注意和不加 prefix 的 ctrl l 的区别,
#                不加 prefix 的 ctrl l 只清空当前窗格的屏幕,
#                窗格的历史内容记录还是保留的, 可以通过进入 copy 模式后进行浏览.
#
#   **** copy 模式 ****
#             [  进入到 copy 模式.
#             ]  将拷贝的文本进行粘贴.
#
#   NOTE: 以下快捷键是进入到 copy 模式后的操作, 均不需要加 prefix.
#
#             q  退出 copy 模式.
#          kjhl  光标上下左右移动.
#                远不止这些, 很多 vim 下的命令都可以在 copy 模式下使用.
#             v  使用该命令进行文本选择.
#       shift v  进行整行选择.
#        ctrl v  进行矩形选择, 按完 ctrl v 后, 需要再通过 v 进行选择.
#           esc  退出当前选择的文本, 这样就可以重新使用 v 进行选择了.
#             /  弹出 (search down), 进入字符串或正则搜索模式,
#                搜索当前窗格的历史内容并高亮显示;
#                这里有个技巧可以大面积复制屏幕上的文本内容:
#                   输入要复制的文本的开头的关键字, 回车后, 光标将定位到你输入的关键字,
#                   然后按 l 键扩大你要复制的文本范围,
#                   然后按 enter 即可将内容拷贝到系统剪贴板.
#             ?  弹出 (search up), 其他同 /.
#           n/N  向上/向下搜索文本关键字.
#         enter  复制选中的文本.
#
#   **** sync 模式 ****
#        ctrl y  打开或关闭 sync 模式.
#
#   **** 常规模式 ****
#             /  弹出 copycat search:, 进入字符串或正则搜索模式, 其他操作同 copy 模式的 /.
#
#   **** 插件能力 ****
#             I  安装新添加的插件.
#             U  更新插件.
#             u  卸载不在配置文件中的插件.
#        ctrl s  保存当前的所有 session.
#        ctrl r  由于服务器重启或 tmux kill-server 等原因导致丢失 session 后,
#                可以使用此命令恢复 session.
#        ctrl f  进入 copy 模式, 光标跳转到命令行上方的文件名称并高亮显示选中文件名.
#        ctrl g  进入 copy 模式, 用于 git status -sb 命令后,
#                选中列出的一个文件名称并高亮显示.
#        ctrl u  进入 copy 模式, 光标跳转到命令行上方的 url 链接并高亮显示.
#        ctrl d  进入 copy 模式, 光标跳转到命令行上方的数字并高亮显示.
#             D  进入 copy 模式, 并高亮选中每行开头的数字字符串,
#                一般用于 pgrep -lf processname 命令后, 用来快速选择复制 PID.
#             S  进入 copy 模式, 并高亮选中 "" 包裹的字符串.
#        ctrl i  进入 copy 模式, 并选中命令行上方的 IP 地址, 并高亮显示.
#        ctrl h  进入 copy 模式, 并选中并高亮显示 sha1 字符串,
#                一般用于 git log | head -20 命令后.
#             y  normal 模式下, 将命令行文本复制到系统剪贴板;
#                copy 模式下, 将通过 n/N 选择的高亮文本拷贝到系统剪贴板.
#             Y  normal 模式下, 将窗格的当前工作目录文本拷贝到系统剪贴板;
#                copy 模式下, 将通过 n/N 选择的高亮文本直接复制并粘贴到命令行.
#             o  copy 模式下, 直接使用相应的默认应用打开选中的文件或 url.
#             S  copy 模式下, 使用 google 搜索选中的字符串,
#                注意可使用 l 或 h 向右或向左扩展选中的字符串.
#             B  copy 模式下, 使用 bing 搜索选中的字符串.
#
#   **** 注意事项 ****
#
#    1) 有些情况下, 不管怎么修改配置文件, 都无法使配置生效, 解决方法:
#       tmux kill-server
#
#    2) 即使通过 tmux kill-server 方式, 部分配置仍然不生效,
#       比如自动恢复保存的 sessions 功能, 解决办法:
#       ps axu|grep -v grep|grep tmux|awk '{print $2}'|xargs kill -9

# }}
